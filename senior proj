var floor = {
	dPoint: ["1","2","3","4","5","6"],
	edge: [,
		["1", "2", 7],
		["1", "3", 9],
		["1", "6", 14],
		["2", "3", 10],
		["2", "4", 15],
		["3", "4", 11],
		["3", "6", 2],
		["4", "5", 6],
		["5", "6", 9]
	]
};

function dijkstra(start, fMap) {
	var distance = {},
		prev = {},
		path = {},
        minD;
        
	fMap.dPoint.forEach(function(p) {
		distance[p] = Infinity;
		prev[p] = null;
		path[p] = 1;
	});

	distance[start] = 0;

	while (Object.keys(path).length > 0) {
		minD = Object.keys(path).reduce(function(prev, p) {
            console.log("PREV: ", prev, "P: ", p);
            console.log("DISTANCE: ", distance[prev] > distance[p] ? + p : prev);

			return distance[prev] > distance[p] ? + p : prev;
        }, Object.keys(path)[0]);
        
        //console.log("TEST: ", minD);

		// fMap.edge.filter(function(edge) {
		// 	var from = edge[0],
		// 		to 	 = edge[1];
		// 	return from===minD || to===minD;
		// })
		// .forEach(function(edge) {
		// 	var to = edge[1]===minD ? edge[0] : edge[1],
		// 		dist = distance[minD] + edge[2];

		// 	if (distance[to] > dist) {
		// 		distance[to] = dist;
		// 		prev[to] = minD;
		// 	}
		// });

		delete path[minD];
	}
	return distance;
};

console.log(dijkstra("1", floor));

//http://www.growingwiththeweb.com/data-structures/fibonacci-heap/overview/
